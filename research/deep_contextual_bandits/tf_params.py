import tensorflow as tf

def get_hparams_linear(num_actions, context_dim):
	return tf.contrib.training.HParams(num_actions=num_actions,
                                     context_dim=context_dim,
                                     a0=6,
                                     b0=6,
                                     lambda_prior=0.25,
                                     initial_pulls=2)

def get_hparams_rms(num_actions, context_dim):
	return tf.contrib.training.HParams(num_actions=num_actions,
                                     context_dim=context_dim,
                                     init_scale=0.3,
                                     activation=tf.nn.relu,
                                     layer_sizes=[50],
                                     batch_size=512,
                                     activate_decay=True,
                                     initial_lr=0.1,
                                     max_grad_norm=5.0,
                                     show_training=False,
                                     freq_summary=1000,
                                     buffer_s=-1,
                                     initial_pulls=2,
                                     optimizer='RMS',
                                     reset_lr=True,
                                     lr_decay_rate=0.5,
                                     training_freq=50,
                                     training_epochs=100,
                                     p=0.95,
                                     q=3)

def get_hparams_dropout(num_actions, context_dim):
	return tf.contrib.training.HParams(num_actions=num_actions,
                                     context_dim=context_dim,
                                     init_scale=0.3,
                                     activation=tf.nn.relu,
                                     layer_sizes=[50],
                                     batch_size=512,
                                     activate_decay=True,
                                     initial_lr=0.1,
                                     max_grad_norm=5.0,
                                     show_training=False,
                                     freq_summary=1000,
                                     buffer_s=-1,
                                     initial_pulls=2,
                                     optimizer='RMS',
                                     reset_lr=True,
                                     lr_decay_rate=0.5,
                                     training_freq=50,
                                     training_epochs=100,
                                     use_dropout=True,
                                     keep_prob=0.80)

def get_hparams_bbb(num_actions, context_dim):
	return tf.contrib.training.HParams(num_actions=num_actions,
                                     context_dim=context_dim,
                                     init_scale=0.3,
                                     activation=tf.nn.relu,
                                     layer_sizes=[50],
                                     batch_size=512,
                                     activate_decay=True,
                                     initial_lr=0.1,
                                     max_grad_norm=5.0,
                                     show_training=False,
                                     freq_summary=1000,
                                     buffer_s=-1,
                                     initial_pulls=2,
                                     optimizer='RMS',
                                     use_sigma_exp_transform=True,
                                     cleared_times_trained=10,
                                     initial_training_steps=100,
                                     noise_sigma=0.1,
                                     reset_lr=False,
                                     training_freq=50,
                                     training_epochs=100)

def get_hparams_nlinear(num_actions, context_dim):
	return tf.contrib.training.HParams(num_actions=num_actions,
                                     context_dim=context_dim,
                                     init_scale=0.3,
                                     activation=tf.nn.relu,
                                     layer_sizes=[50],
                                     batch_size=512,
                                     activate_decay=True,
                                     initial_lr=0.1,
                                     max_grad_norm=5.0,
                                     show_training=False,
                                     freq_summary=1000,
                                     buffer_s=-1,
                                     initial_pulls=2,
                                     reset_lr=True,
                                     lr_decay_rate=0.5,
                                     training_freq=1,
                                     training_freq_network=50,
                                     training_epochs=100,
                                     a0=6,
                                     b0=6,
                                     lambda_prior=0.25)

def get_hparams_nlinear2(num_actions, context_dim):
	return tf.contrib.training.HParams(num_actions=num_actions,
                                     context_dim=context_dim,
                                     init_scale=0.3,
                                     activation=tf.nn.relu,
                                     layer_sizes=[50],
                                     batch_size=512,
                                     activate_decay=True,
                                     initial_lr=0.1,
                                     max_grad_norm=5.0,
                                     show_training=False,
                                     freq_summary=1000,
                                     buffer_s=-1,
                                     initial_pulls=2,
                                     reset_lr=True,
                                     lr_decay_rate=0.5,
                                     training_freq=10,
                                     training_freq_network=50,
                                     training_epochs=100,
                                     a0=6,
                                     b0=6,
                                     lambda_prior=0.25)

def get_hparams_pnoise(num_actions, context_dim):
	return tf.contrib.training.HParams(num_actions=num_actions,
                                     context_dim=context_dim,
                                     init_scale=0.3,
                                     activation=tf.nn.relu,
                                     layer_sizes=[50],
                                     batch_size=512,
                                     activate_decay=True,
                                     initial_lr=0.1,
                                     max_grad_norm=5.0,
                                     show_training=False,
                                     freq_summary=1000,
                                     buffer_s=-1,
                                     initial_pulls=2,
                                     optimizer='RMS',
                                     reset_lr=True,
                                     lr_decay_rate=0.5,
                                     training_freq=50,
                                     training_epochs=100,
                                     noise_std=0.05,
                                     eps=0.1,
                                     d_samples=300)
                                     
def get_hparams_alpha_div(num_actions, context_dim):
	return tf.contrib.training.HParams(num_actions=num_actions,
                                     context_dim=context_dim,
                                     init_scale=0.3,
                                     activation=tf.nn.relu,
                                     layer_sizes=[50],
                                     batch_size=512,
                                     activate_decay=True,
                                     initial_lr=0.1,
                                     max_grad_norm=5.0,
                                     show_training=False,
                                     freq_summary=1000,
                                     buffer_s=-1,
                                     initial_pulls=2,
                                     optimizer='RMS',
                                     use_sigma_exp_transform=True,
                                     cleared_times_trained=10,
                                     initial_training_steps=100,
                                     noise_sigma=0.1,
                                     reset_lr=False,
                                     training_freq=50,
                                     training_epochs=100,
                                     alpha=1.0,
                                     k=20,
                                     prior_variance=0.1)

def get_hparams_gp(num_actions, context_dim):
	return tf.contrib.training.HParams(num_actions=num_actions,
                                     num_outputs=num_actions,
                                     context_dim=context_dim,
                                     reset_lr=False,
                                     learn_embeddings=True,
                                     max_num_points=1000,
                                     show_training=False,
                                     freq_summary=1000,
                                     batch_size=512,
                                     keep_fixed_after_max_obs=True,
                                     training_freq=50,
                                     initial_pulls=2,
                                     training_epochs=100,
                                     lr=0.01,
                                     buffer_s=-1,
                                     initial_lr=0.001,
                                     lr_decay_rate=0.0,
                                     optimizer='RMS',
                                     task_latent_dim=5,
                                     activate_decay=False)
